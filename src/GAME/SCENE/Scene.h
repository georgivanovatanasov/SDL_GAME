#ifndef SCENE_H
#define SCENE_H
#pragma once
#include <GL/glew.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>
#include <src/GAME/GLMainMatrix/MainMatrix.h>
#include <src/GAME/SHADER/ShaderManager.h>
#include <src/OBJECTS/BASEOBJECT/Object.h>
#include <src/SPRITE/Sprite.h>
#include <src/OBJECTS/PLAYER/Player.h>
#include <src/OBJECTS/WORLD/COLLIDER/Collider.h>
#include <src/OBJECTS/WORLD/GRASS/Grass.h>
#include <src/OBJECTS/UI/BUTTON/Button.h>
#include <src/OBJECTS/WORLD/TILEABLE/Tile.h>
#include <src/OBJECTS/WORLD/GRASS/GrassBindingObject.h>
#include <src/OBJECTS/WORLD/TRANSPERANT/Transperant.h>
#include <src/OBJECTS/WORLD/TRANSPERANTVECTOR/TransperantVector.h>
#include <glm/ext.hpp>
#include <fstream>
#include <sstream>
#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <string>
#include <cstring>
#include <functional>
#include <cmath>
#include <array>
#include <typeinfo>

class Scene
{
    public:
        Scene(MainMatrix* MMatrix,ShaderManager* SManager);
        ~Scene();
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                /*Primitive Buffer Vectors*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::vector<Sprite*> sampler_vector;
    std::vector<GLfloat> verticles_vector;
    std::vector<GLfloat> texcoords_vector;
    std::vector<GLint> index_vector;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                       /*MainMatrix*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MainMatrix* m_MMatrix=NULL;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                      /*ShaderManager*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ShaderManager* m_SManager=NULL;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                       /*Scene Init*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SceneInit(std::string path);
    void SceneLoadGrid(std::string path,short grid_x,short grid_y);
    std::string CurrentScene="";
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            /*Scene Coordinates and Size*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetSceneSize(int start_x,int start_y,int end_x,int end_y);
    int scene_startx=0;
    int scene_starty=0;
    int scene_endx=0;
    int scene_endy=0;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            /*Player Previous Grid*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    short player_grid_prev_x=0;
    short player_grid_prev_y=0;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                     /*Step*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void step();
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                    /*Vectors*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::vector<Object*> obj_vector; //used to store and delete objects
    std::vector<Object*> draw_vector; //used to store and delete objects
    std::vector<Sprite*> sprite_vector; //used to store and delete sprites
    std::vector<GrassBindingObject*> GBO_vector; //used to store and delete GrassBindingObject
    std::vector<Grass*> grass_vector;
    std::deque<std::reference_wrapper<Button*>> button_deque; //used to delete buttons
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            /*Delete Previous Scene*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void EmptyScene();
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                    /*Player*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool HasPlayer=false;
    Player* player=NULL;
    void InitializePlayer(Sprite* player_sprite,int spawn_x,int spawn_y);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                    /*Buttons*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void ResetButtons();
    Button* login_button=NULL;
    Button* exit_button=NULL;

                                                    /*SCENES*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*Main Menu*/
    void LoadMainMenu();
    /*Town Hall*/
    void LoadScene(std::string path);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                /*Sort the drawing depth of objects*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SortDrawDepth();
};

#endif // SCENE_H
